---
AWSTemplateFormatVersion: '2010-09-09'
Description: Cat facial recognition OpenCV lambda
Parameters:
  S3BucketName:
    Type: String
    Description: The S3 bucket which contains cat pictures
  S3BucketPrefix:
    Type: String
    Description: A bucket prefix where the cat pictures are found
    Default: /catscanface
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: CloudwatchLog
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: AccessCatPictureBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource: !Join ['', ['arn:aws:s3:::', Ref: S3BucketName, Ref: S3BucketPrefix, '/motion/*']]
      - PolicyName: WriteDetectedCatFrames
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            Resource: !Join ['', ['arn:aws:s3:::', Ref: S3BucketName, Ref: S3BucketPrefix, '/detections/*']]
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: 'print("hello world")'
      Description: Scan images uploaded to S3 for cats
      FunctionName:
        Ref: AWS::StackName
      Handler: catscan.lambda_handler
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn
      Runtime: python2.7
      Timeout: '4'
Outputs:
  LambdaRole:
    Description: IAM Role for LambdaRole
    Value:
      Ref: LambdaRole
  Lambda:
    Value: !GetAtt Lambda.Arn
